// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Standard Edition"

// DATE "10/21/2016 11:19:01"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module full_adder (
	Cin,
	X,
	Y,
	S,
	Cout);
input 	Cin;
input 	X;
input 	Y;
output 	S;
output 	Cout;

// Design Ports Information
// S	=>  Location: PIN_V2,	 I/O Standard: 2.5 V,	 Current Strength: Default
// Cout	=>  Location: PIN_V1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// Cin	=>  Location: PIN_V3,	 I/O Standard: 2.5 V,	 Current Strength: Default
// X	=>  Location: PIN_V4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// Y	=>  Location: PIN_U2,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("full_adder_v.sdo");
// synopsys translate_on

wire \S~output_o ;
wire \Cout~output_o ;
wire \X~input_o ;
wire \Cin~input_o ;
wire \Y~input_o ;
wire \S~0_combout ;
wire \Cout~0_combout ;


// Location: IOOBUF_X0_Y28_N16
cycloneive_io_obuf \S~output (
	.i(\S~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S~output_o ),
	.obar());
// synopsys translate_off
defparam \S~output .bus_hold = "false";
defparam \S~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y28_N23
cycloneive_io_obuf \Cout~output (
	.i(\Cout~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Cout~output_o ),
	.obar());
// synopsys translate_off
defparam \Cout~output .bus_hold = "false";
defparam \Cout~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y29_N15
cycloneive_io_ibuf \X~input (
	.i(X),
	.ibar(gnd),
	.o(\X~input_o ));
// synopsys translate_off
defparam \X~input .bus_hold = "false";
defparam \X~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y29_N22
cycloneive_io_ibuf \Cin~input (
	.i(Cin),
	.ibar(gnd),
	.o(\Cin~input_o ));
// synopsys translate_off
defparam \Cin~input .bus_hold = "false";
defparam \Cin~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y30_N1
cycloneive_io_ibuf \Y~input (
	.i(Y),
	.ibar(gnd),
	.o(\Y~input_o ));
// synopsys translate_off
defparam \Y~input .bus_hold = "false";
defparam \Y~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y29_N16
cycloneive_lcell_comb \S~0 (
// Equation(s):
// \S~0_combout  = \X~input_o  $ (\Cin~input_o  $ (\Y~input_o ))

	.dataa(\X~input_o ),
	.datab(\Cin~input_o ),
	.datac(gnd),
	.datad(\Y~input_o ),
	.cin(gnd),
	.combout(\S~0_combout ),
	.cout());
// synopsys translate_off
defparam \S~0 .lut_mask = 16'h9966;
defparam \S~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y29_N18
cycloneive_lcell_comb \Cout~0 (
// Equation(s):
// \Cout~0_combout  = (\X~input_o  & ((\Cin~input_o ) # (\Y~input_o ))) # (!\X~input_o  & (\Cin~input_o  & \Y~input_o ))

	.dataa(\X~input_o ),
	.datab(\Cin~input_o ),
	.datac(gnd),
	.datad(\Y~input_o ),
	.cin(gnd),
	.combout(\Cout~0_combout ),
	.cout());
// synopsys translate_off
defparam \Cout~0 .lut_mask = 16'hEE88;
defparam \Cout~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign S = \S~output_o ;

assign Cout = \Cout~output_o ;

endmodule
